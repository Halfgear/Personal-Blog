[{"content":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eBefore I check my insights of Valorant with stats, the foremost task was to construct a robust data crawler. This pivotal first step would act as the foundation, paving the way for any meaningful analysis. When building a data crawler to fetch, process, and store a massive amount of data, challenges are inevitable. As I embarked on my journey to create a crawler for Valorant\u0026rsquo;s match data, I encountered a series of obstacles that pushed me to optimize my approach in terms of speed, storage, and robustness.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/posts/Valorant/image.png\" alt=\"image.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"maximize-crawler-speed\"\u003eMaximize Crawler Speed\u003c/h2\u003e\n\u003cp\u003eA critical limitation with Riot games data crawling is often the rate to retrieve data from their server. I had to maximize what I could get from the low API limit for demo product if I wanted to gather vast amounts of data. My initial solution was straightforward: send a request, get data, process, and repeat. However, this sequential approach wasn\u0026rsquo;t cutting it.\u003c/p\u003e\n\u003ch3 id=\"concurrent-api-requests-with-aiohttp\"\u003eConcurrent API Requests with Aiohttp\u003c/h3\u003e\n\u003cp\u003eBy using \u003cstrong\u003e\u003ccode\u003eaiohttp\u003c/code\u003e\u003c/strong\u003e  , asynchronous HTTP client/server framework, I was able to send multiple requests concurrently. This approach was similar to having multiple data crawlers working simultaneously to call match info API. This dramatically increased the amount of data I could retrieve within my request limits. I was able to confirm it when I was receiving ‘429 error’, which means I was hitting maximum number of requests.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/posts/Valorant/429.png\" alt=\"429.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"oversized-documents\"\u003eOversized Documents\u003c/h2\u003e\n\u003cp\u003eUpon fetching the data, I noticed an immediate storage issue. The raw data I initially saved to MongoDB consumed a staggering 200KB-300KB per document. The voluminous nature of Valorant\u0026rsquo;s API output with nested DTOs detailing every individual round, wasn\u0026rsquo;t storage-friendly. Persisting with this raw format threatened to exhaust the storage capacity of our AWS machine. This was especially concerning as my crawls encompassed hundreds of matches in each loop. I tried to gzip the code to compress the data, but the zip was not very efficient because it was not recognizing repetitive patterns at the complicated API output to reduce the size.\u003c/p\u003e\n\u003ch3 id=\"trimming-and-extraction\"\u003eTrimming and Extraction\u003c/h3\u003e\n\u003cp\u003eI took a methodical approach, scouring the data to pinpoint areas ripe for trimming while ensuring the quality and integrity of our information remained untouched. Unused details were discarded, while critical stats underwent extraction and condensation. My efforts culminated in a drastically trimmed document size around 12KB.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/posts/Valorant/size.png\" alt=\"collection\"\u003e\u003c/p\u003e\n\u003ch3 id=\"code\"\u003eCode\u003c/h3\u003e\n\u003cp\u003eLet’s delve into how I managed this feat in the code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eextract_player_stats\u003c/span\u003e(players, round_results):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#75715e\"\u003e#Extract and clean player stats from provided data.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    damage_dict \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {player[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;puuid\u0026#34;\u003c/span\u003e]: [] \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e player \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e players}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    economy_dict \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {player[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;puuid\u0026#34;\u003c/span\u003e]: [] \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e player \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e players}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e round_result \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e round_results:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e player_stat \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e round_result[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;playerStats\u0026#34;\u003c/span\u003e]:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            stat_puuid \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e player_stat[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;puuid\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e# List comprehension to simplify the damage_dtos.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            damage_dict[stat_puuid]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend([\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                {k: v \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e k, v \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e dto\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eitems() \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e k \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;receiver\u0026#39;\u003c/span\u003e} \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e dto \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e player_stat[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;damage\u0026#34;\u003c/span\u003e]])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            economy_dict[stat_puuid]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(player_stat[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;economy\u0026#34;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# Add the extracted data for the player\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e player \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e players:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        puuid \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e player[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;puuid\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        player[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;totalDamageStat\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e condense_damage_list(damage_dict[puuid])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        player[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pistolRoundEconomy\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e get_pistol_round_economy(economy_dict[puuid])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003edel\u003c/span\u003e player[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;playerCard\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003edel\u003c/span\u003e player[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;playerTitle\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003edel\u003c/span\u003e player[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;partyId\u0026#34;\u003c/span\u003e]      \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e players\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI crafted the \u003cstrong\u003e\u003ccode\u003eextract_player_stats\u003c/code\u003e\u003c/strong\u003e function with a clear focus—efficiently distill player statistics from the given data. Here\u0026rsquo;s what went on inside:\u003c/p\u003e\n\u003cp\u003eA damage dictionary (\u003cstrong\u003e\u003ccode\u003edamage_dict\u003c/code\u003e\u003c/strong\u003e) and an economy dictionary (\u003cstrong\u003e\u003ccode\u003eeconomy_dict\u003c/code\u003e\u003c/strong\u003e) were initialized for each player.\u003c/p\u003e\n\u003cp\u003eRound by round, I saved the respective player\u0026rsquo;s economic standing and damage records while removing unnecessary IDs.\u003c/p\u003e\n\u003cp\u003eUnnecessary player attributes such as \u003cstrong\u003e\u003ccode\u003eplayerCard\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003eplayerTitle\u003c/code\u003e\u003c/strong\u003e, and \u003cstrong\u003e\u003ccode\u003epartyId\u003c/code\u003e\u003c/strong\u003e were removed, considering they don’t have any subsequent statistical usage.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econdense_damage_list\u003c/span\u003e(rounds_damages) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e list:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    total_damage \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    leg_shots \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    body_shots \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    head_shots \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e round_damages \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e rounds_damages:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (len(round_damages) \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e damage \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e round_damages:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                total_damage \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e damage[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;damage\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                leg_shots \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e damage[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;legshots\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                body_shots \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e damage[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bodyshots\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                head_shots \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e damage[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;headshots\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    output \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;damage\u0026#34;\u003c/span\u003e: total_damage,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;headshots\u0026#34;\u003c/span\u003e: head_shots,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bodyshots\u0026#34;\u003c/span\u003e: body_shots,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;legshots\u0026#34;\u003c/span\u003e: leg_shots\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e output\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003cstrong\u003e\u003ccode\u003econdense_damage_list\u003c/code\u003e\u003c/strong\u003e function extracted all damges in each round into one dense damage detail of all round damages for each player.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eget_pistol_round_economy\u003c/span\u003e(player_economy: list) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e list:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        output \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        first_pistol_round \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e player_economy[FIRST_PISTOL_ROUND]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(first_pistol_round[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;spent\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            output\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(first_pistol_round)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        second_pistol_round \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e player_economy[SECOND_PISTOL_ROUND]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(second_pistol_round[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;spent\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            output\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(second_pistol_round)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e output\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eexcept\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eIndexError\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e output\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eInitially, I was planning to analyze pistol round purchases to find, which pistol and skills are preferred in agents, which might help us to understand the agent’s play style and their signature skill. So, I used the \u003cstrong\u003e\u003ccode\u003eget_pistol_round_economy\u003c/code\u003e\u003c/strong\u003e function to specifically extract this and reduce the size of the saved data.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclean_round_result\u003c/span\u003e(round_results):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e round_result \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e round_results:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e key \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;plantPlayerLocations\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;plantLocation\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;defusePlayerLocations\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;defuseLocation\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bombPlanter\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bombDefuser\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;playerStats\u0026#34;\u003c/span\u003e]:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003edel\u003c/span\u003e round_result[key]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e round_results\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003cstrong\u003e\u003ccode\u003eclean_round_result\u003c/code\u003e\u003c/strong\u003e function took center stage here. It looped across all round results, discarding chunks of extraneous data, including \u003cstrong\u003e\u003ccode\u003eplantPlayerLocations\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003eplantLocation\u003c/code\u003e\u003c/strong\u003e, and a slew of other keys.\u003c/p\u003e\n\u003cp\u003eThrough the integration of these refined functions, particularly within the \u003cstrong\u003e\u003ccode\u003esave_match_info_to_db\u003c/code\u003e\u003c/strong\u003e process, I achieved a MongoDB document that was not only lightweight but also condensed analysis-ready information.\u003c/p\u003e\n\u003ch2 id=\"error-handling\"\u003eError Handling\u003c/h2\u003e\n\u003cp\u003eEven with optimized data fetching and storage, a crawler still had issues. During my testing phases, I encountered various API fails due- rate limits, temporary server issues, and unexpected response formats.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/posts/Valorant/crawler.png\" alt=\"crawler\"\u003e\u003c/p\u003e\n\u003ch3 id=\"comprehensive-error-handling\"\u003eComprehensive error handling\u003c/h3\u003e\n\u003cp\u003eInstead of allowing these errors to halt my crawler, I implemented mechanisms to detect and handle them accordingly. From waiting out a rate limit with \u003cstrong\u003e\u003ccode\u003easyncio.sleep()\u003c/code\u003e\u003c/strong\u003e to retrying requests in the face of server errors, my crawler became resilient. Each error-handling iteration made the system more robust, ensuring continuous data retrieval despite temporary setbacks if I have encountered them before.\u003c/p\u003e\n\u003ch3 id=\"conclusion\"\u003eConclusion\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"/posts/Valorant/MongoDB.png\" alt=\"MongoDB\"\u003e\u003c/p\u003e\n\u003cp\u003eBy harnessing the power of asynchronous programming, fine-tuning data storage methods, and implementing robust error-handling mechanisms, I was able to optimize my data crawler. After reading API documentation multiple times, I was able to identify and extract the precise data I needed. This journey reminded me about the importance of perseverance, adaptability, and innovation in the face of technological hurdles. As developers, it\u0026rsquo;s these trials that hone my skills, pushing me not just to build, but to build better.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/posts/Valorant/kafka.jpg\" alt=\"MongoDB\"\u003e\u003c/p\u003e\n\u003cp\u003eThis was just a first step of the project. Upon completing the website backend support using NestJS with mocking data for front end developers to use, I intend to further advance the crawler system. A planned integration with Kafka will compartmentalize the crawler and statistical calculation components, ensuring that our infrastructure remains robust even if potential failures occur in our AWS machines. Furthermore, with a scheduled cronjobs, I will synchronize our data with PostgreSQL to finialize the backend support for our website.\u003c/p\u003e\n","description":null,"image":"/posts/League/valorant.jpeg","permalink":"https://jooncode.com/code/crawler/","title":"Building a Match History Crawler"},{"content":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThe realm of Valorant offers players numerous agents, each boasting unique abilities and strategies to win. But how do players, both new and experienced, navigate this vast selection?\u003c/p\u003e\n\u003cp\u003eWith a combination of Python programming and a rich dataset extracted from MongoDB, I obtained the performance metrics of various agents across different skill tiers. The result challenges widely held beliefs and shed light on the actual efficacy of agents in various gameplay scenarios. This post will offer insights that can inform and enhance player choices and strategies.\u003c/p\u003e\n\u003ch2 id=\"methodology\"\u003eMethodology\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ematch_db \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e riot_db\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eget_collection(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;competitive_match_crawler\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehigh_dict \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elow_dict \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecreate_dict\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    agent_id_list \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e char_dictionary\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ekeys()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e agent_id \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e agent_id_list:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        high_dict[char_dictionary\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eget(agent_id)] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;win\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;loss\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        low_dict[char_dictionary\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eget(agent_id)] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;win\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;loss\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eloop_docs_count_win_loss\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e document \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e match_db\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efind():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        count_win_loss(document)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;finished looping\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecount_win_loss_in_document\u003c/span\u003e(document):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    players \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e document[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;players\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    teams \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e document[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;teams\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    blue_char_ids \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    red_char_ids \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e player \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e players:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tchar_id \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e player[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;characterId\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\ttier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e player[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;competitiveTier\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (player[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;teamId\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Blue\u0026#34;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            blue_char_ids\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(char_id)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            red_char_ids\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(char_id)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (did_red_win):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        increment_win(red_char_ids, tier)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        increment_loss(blue_char_ids, tier)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        increment_win(blue_char_ids, tier)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        increment_loss(red_char_ids, tier)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eincrement_win\u003c/span\u003e(char_id_list, tier):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e char_id \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e char_id_list:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        agent_name \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e char_dictionary\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eget(char_id)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(tier \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            low_dict[agent_name][\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;win\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            high_dict[agent_name][\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;win\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"1-database-and-dictionaries-initialization\"\u003e1. Database and dictionaries Initialization\u003c/h3\u003e\n\u003cp\u003eThe data is fetched from my MongoDB collection which I am currently crawling with AWS EC2 machine with Valorant API. high_dict and low_dict are initialized as dictionaries to store win-loss statistics for agents across different skill tiers.\u003c/p\u003e\n\u003cp\u003eThe function create_dict() systematically populates the high and low skill tier dictionaries with agent names, initializing their win-loss count with zeros. This created a base template for subsequent data aggregation.\u003c/p\u003e\n\u003ch3 id=\"2-data-iteration\"\u003e2. Data Iteration\u003c/h3\u003e\n\u003cp\u003eThe loop_docs_count_win_loss() method ensures every match in the database is scanned, while the win-loss data for agents is populated through the count_win_loss_in_document() function.\u003c/p\u003e\n\u003ch3 id=\"3-match-analysis\"\u003e3. Match Analysis:\u003c/h3\u003e\n\u003cp\u003eWithin each match document, agent details and team information are extracted. Depending on which team wins, the increment_win or increment_loss functions update the respective win or loss count for the agents.\u003c/p\u003e\n\u003cp\u003eThe code accounts for the player’s competitive tier (below or above Platinum) to decide if the win or loss should be registered in the low or high skill tier dictionary.\u003c/p\u003e\n\u003cimg src=\"/posts/League/sage.png\" style=\"display: block; margin-left: auto; margin-right: auto; width: 70%; height: 70%;\"/\u003e\n\u003cp\u003eThe chart is drawn with google spread sheet and pandas library.\u003c/p\u003e\n\u003ch2 id=\"sage-is-diffcult\"\u003eSage is diffcult\u003c/h2\u003e\n\u003cp\u003eThe chart above showcases the win rate difference between high and low-tier players for various agents. The taller the bar, the better the agent\u0026rsquo;s winrate in higher tiers. The two data points that stand out most prominently in the chart are Sage and Neon. If you were to ask current Valorant players which agent they would recommend to a newcomer between these two, most would likely suggest Sage.\u003c/p\u003e\n\u003cimg src=\"/posts/League/sage_diff.png\" style=\"display: block; margin-left: auto; margin-right: auto; width: 30%; height: 30%;\"/\u003e\n\u003cp\u003eThe common reasoning? Sage\u0026rsquo;s abilities are straightforward, and even if one isn\u0026rsquo;t skilled in direct combat, they can still contribute significantly through her supportive capabilities, which seems very easy like Mercy in Overwatch.\u003c/p\u003e\n\u003cp\u003eHowever, the data tells a different story from this widely held belief. Sage\u0026rsquo;s win rate eclipses her peers in the higher tiers by 1.744%, while Neon lags behind with a decrease of -1.406%. Notably, these two agents possess deviations that are double that of their closest competitor. Ironically, Sage is hard because it is difficult to maximize her supporting value because it requires her to stay alive and farm ult points with kills.\u003c/p\u003e\n\u003cp\u003eWhen players are unfamiliar with the available agents, they often gravitate towards those that appear simple and user-friendly. Sage, who seems to have a straightforward and intuitive skill set, is frequently recommended to newcomers. However, my recent statistical analysis suggests that this common recommendation may not be the most beneficial for new players.\u003c/p\u003e\n\u003ch2 id=\"flash-difficulties\"\u003eFlash difficulties\u003c/h2\u003e\n\u003cp\u003eThe chart predominantly clusters agents by their respective roles, with only a few edge cases like Neon. Notable difficulty disparity is the gap between Flash-holding Initiators and Non-flash Info Initiators.\u003c/p\u003e\n\u003cimg src=\"/posts/League/initiator.png\" style=\"display: block; margin-left: auto; margin-right: auto; width: 70%; height: 70%;\"/\u003e\n\u003cp\u003eThis notably underscores the intricacies of using the \u0026lsquo;Flash\u0026rsquo; ability in Valorant. If flash is not deployed effectively during combat, it risks allies as well. The performance disparity of Flash-based agents across skill tiers reveals that proficient players employ the Flash with a tactical finesse that significantly contributes to team combat efficacy. Conversely, its misuse at low tiers can suggest unfamiliarity or even intimidation with the ability.\u003c/p\u003e\n\u003cp\u003eConversely, the data also highlights that agents like Fade and Sova with drones, exhibit less performance gaps. This suggests that even when players at the lower end of the skill spectrum deploy these abilities, they can do so without severely impacting their team\u0026rsquo;s outcome.\u003c/p\u003e\n\u003cp\u003eFor newcomers, beginning with info agents like Sova could be a strategic move. This will allow them to familiarize themselves with the game\u0026rsquo;s tempo and mechanics, setting a solid foundation for mastering more complex agents and abilities in the future.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eNavigating the intricate landscape of Valorant is not a small project. We identified what could possibly cause the performance gap between low and high tiers with data analysis supported Python and MongoDB.\u003c/p\u003e\n\u003cimg src=\"/posts/League/agents.jpeg\" style=\"display: block; margin-left: auto; margin-right: auto; width: 70%; height: 70%;\"/\u003e\n\u003cp\u003eTraditional wisdom might suggest certain agent choices, but our data reveals nuances—like Sage, seemingly beginner-friendly, yet possessing a steep learning curve. It\u0026rsquo;s a testament to the depths that lie beyond initial impressions.\u003c/p\u003e\n\u003cp\u003eFurthermore, understanding the challenges that confront newcomers is pivotal. We need to pave the way for enhancing their gameplay and easing their integration into the competetitive ecosystem. Through this analysis, I hope to bridge the knowledge gap for players, old and new, encouraging them to make data-informed decisions in their Valorant journeys. I have a lot more insights to share, so stay tuned!\u003c/p\u003e\n","description":"Data investigation to find easy to play agents","image":"/posts/League/valorant.jpeg","permalink":"https://jooncode.com/code/agentparadox/","title":"The Paradox of Agent difficulty"},{"content":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eDesign patterns are essential in development as they provide a structured approach to solve common problems. Object-oriented design patterns are the most widely used patterns, and they form the backbone of most software applications.\n\u003cimg src=\"/posts/OOD/mypic.PNG\" style=\"display: block; margin-left: auto; margin-right: auto; width: 80%; height: 80%;\"/\u003e\nIn this post, I\u0026rsquo;ll share my experience as a OOD TA and insights on how these patterns work and provide you with some sample code to help you understand them better. We will explore Singleton, Factory, Strategy, and Observer patterns, and how these patterns can be used to improve the quality of your designs and provide you with code samples to illustrate their implementation.\u003c/p\u003e\n\u003ch2 id=\"singleton-pattern\"\u003eSingleton Pattern\u003c/h2\u003e\n\u003cp\u003eSingleton pattern helps in creating only one instance of a class and ensures that this instance is globally accessible throughout the program. The pattern works by defining a class that has only one instance and provide global point of access to that instance.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSingleton\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esingleInstanceHolder\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efinal\u003c/span\u003e Singleton INSTANCE \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Singleton\u003cspan style=\"color:#f92672\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e Singleton \u003cspan style=\"color:#a6e22e\"\u003egetInstance\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e singleInstanceHolder\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eINSTANCE\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u0026lsquo;INSTANCE\u0026rsquo; variable is the only instance of Singleton class. By declaring \u0026lsquo;INSTANCE\u0026rsquo; as \u0026lsquo;final\u0026rsquo;, it ensures that there is only one instance of the \u0026lsquo;Singleton\u0026rsquo; class created becuase final keyword prevents the \u0026lsquo;INSTANCE\u0026rsquo; variable from being reassigned after it is initialized.\u003c/p\u003e\n\u003cp\u003eThe \u0026lsquo;getInstance()\u0026rsquo; method returns the single instance of the class as a getter. \u0026lsquo;public\u0026rsquo; keywords allow the method to be accessed from outside the Singleton class. It provides the global access point to our instance throught the program.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHelloWorld\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e args\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Singleton a \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Singleton\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egetInstance\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Singleton b \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Singleton\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egetInstance\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        System\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003ea\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehashCode\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e());\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        System\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eb\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehashCode\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e());\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003ea\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003eb\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            System\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eprint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;output: true\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eoutput: true\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBoth \u0026lsquo;a\u0026rsquo; and \u0026lsquo;b\u0026rsquo; refers to the same instance of the Singleton class. Therefore, \u0026lsquo;a.hashCode()\u0026rsquo;  and \u0026lsquo;b.hashCode()\u0026rsquo; will always be equal. If you understand the concept of singleton pattern, you will be able to use it to create a database connection, a thread pool, or a cache.\u003c/p\u003e\n\u003ch2 id=\"factory-pattern\"\u003eFactory Pattern\u003c/h2\u003e\n\u003cp\u003eThe factory pattern is a creational pattern that allows you to create objects without specifying the exact class of object that will be created. Instead you delegate the creation of smaller objects to a separate class called a factory. This pattern is useful when you need to create many objects of the same type, but with different values or properties.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eabstract\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCoffee\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//abstract method, so subclass must implement this method \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eabstract\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetPrice\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e();\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Override\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e String \u003cspan style=\"color:#a6e22e\"\u003etoString\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Price: \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egetPrice\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLatte\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eextends\u003c/span\u003e Coffee \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e price\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLatte\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e price\u003cspan style=\"color:#f92672\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eprice\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eprice\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Override\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetPrice\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eprice\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAmericano\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eextends\u003c/span\u003e Coffee \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e price\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAmericano\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e price\u003cspan style=\"color:#f92672\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eprice\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eprice\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Override\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetPrice\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eprice\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCoffeeFactory\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//factory method to create object of type Coffee\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e Coffee \u003cspan style=\"color:#a6e22e\"\u003egetCoffee\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eString type\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e price\u003cspan style=\"color:#f92672\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Latte\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eequalsIgnoreCase\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003etype\u003cspan style=\"color:#f92672\"\u003e))\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Latte\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eprice\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Americano\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eequalsIgnoreCase\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003etype\u003cspan style=\"color:#f92672\"\u003e))\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Americano\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eprice\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            System\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Invalid Coffee Type\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe have an abstract class Coffee with an abstract method getPrice(). We then have two concrete classes that extend Coffee: Latte and Americano. Latte and Americano have a constructor that takes in a price and initialize the private field.\u003c/p\u003e\n\u003cp\u003eThere could be more concrete classes that extend Coffee, such as Espresso, Mocha, etc. If we create a new coffee object, we would have to write many lines of code to create the object with field initialization. This is where the factory pattern comes in!\u003c/p\u003e\n\u003cp\u003eWe have a CoffeeFactory class that has a static method getCoffee(). This method takes in a type and a price and returns a Coffee object. The getCoffee() method uses the type parameter to determine which concrete class to instantiate. The price parameter is passed to the constructor of the concrete class. This way, we can create a coffee object without having to write a lot of code. We can create new coffee obejcts just by calling the getCoffee(type, price) method. The output of the code below is as follows:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHelloWorld\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eString \u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003eargs\u003cspan style=\"color:#f92672\"\u003e){\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Coffee latte \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CoffeeFactory\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egetCoffee\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Latte\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e 5\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Coffee ame \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CoffeeFactory\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egetCoffee\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Americano\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e 4\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        System\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Factory latte: \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e latte\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        System\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Factory ame: \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e ame\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eoutput:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eFactory latte: Price: 4000\r\nFactory ame: Price: 3000\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFactory pattern is a powerful design pattern that allows you to create objects without specifying the exact class of object that will be created. If you are writing a program that needs to create many objects of the same type, you should consider using the factory pattern.\u003c/p\u003e\n\u003ch2 id=\"strategy-pattern\"\u003eStrategy Pattern\u003c/h2\u003e\n\u003cp\u003eStrategy pattern is a behavioral design pattern that allows you to define a family of algorithms, put each of them into a separate class, and make their objects interchangeable. The pattern allows you to change the behavior of an object by changing the object\u0026rsquo;s strategy.\u003c/p\u003e\n\u003cp\u003eHere\u0026rsquo;s a simple example of the strategy pattern in Java: Suppose you are writing a program that performs some operation on two integers. You would first define an interface that defines the operation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eOperation\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eperformOperation\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis interface is simply defining a method that takes two integers and returns an integer. You would then create two classes that implement this interface for each type of operation you need to perform. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAddition\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eimplements\u003c/span\u003e Operation \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eperformOperation\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//1+1 = 2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e b\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eConcatenation\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eimplements\u003c/span\u003e Operation \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eperformOperation\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//1 cat 1 = 11\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e Integer\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eparseInt\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eInteger\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etoString\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003ea\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e Integer\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etoString\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eb\u003cspan style=\"color:#f92672\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn these examples, Addition performs addition on two integers, while Concatenation concatenates them as strings and then parses the result back to an integer.\u003c/p\u003e\n\u003cp\u003eFinally, you would create a class that uses these operations.\nFor example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCalculator\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e Operation operation\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esetOperation\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eOperation operation\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eoperation\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e operation\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eperformOperation\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e operation\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eperformOperation\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003ea\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e b\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis calculator class has a field called operation that is of type Operation. This field is set to an instance of Addition or Concatenation. The performOperation() method calls the performOperation() method on the operation field. This allows you to change the behavior of the calculator by just changing the operation field.\u003c/p\u003e\n\u003cp\u003eOverall, Strategy pattern allows you to change the behavior of an object by changing the object\u0026rsquo;s strategy. This is useful when you have multiple algorithms that perform the same task and you want to be able to switch between them at runtime.\u003c/p\u003e\n\u003ch2 id=\"observer-pattern\"\u003eObserver Pattern\u003c/h2\u003e\n\u003cp\u003eObserver Pattern is a behavioral design pattern that allows one or more objects to watch an object and be notified when the object state updates. The observer pattern is also known as the publish/subscribe pattern. This pattern is useful when you have a 1-to-many relationship in objects. For example, if you have a relationship between employees and managers, then you can use the observer pattern to notify managers whenever an employee updates their status.\u003c/p\u003e\n\u003cp\u003eThis is example code of the observer pattern:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.util.ArrayList\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.util.List\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSubject\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eregister\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eObserver obj\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enotifyObservers\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e Object \u003cspan style=\"color:#a6e22e\"\u003egetUpdate\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eObserver obj\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eObserver\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eupdate\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e();\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this example, we have a Subject interface that defines the methods that must be implemented as a subject. The register() method is used to register an observer object. The notifyObservers() method is used to notify all registered observers. The getUpdate() method is a getter method to obtain the most recent message from a observer.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTopic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eimplements\u003c/span\u003e Subject \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//list of observers\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e List\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eObserver\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e observers\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//message sent to the topic\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e String message\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//constructor\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTopic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eobservers\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ArrayList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026gt;();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003emessage\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//method to attach an observer to the subject\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Override\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eregister\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eObserver obj\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//check if observer is already registered\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e(!\u003c/span\u003eobservers\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003econtains\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eobj\u003cspan style=\"color:#f92672\"\u003e))\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            observers\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eobj\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//else do nothing\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Override\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enotifyObservers\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//for each loop through all observers and notify them \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eobservers\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eObserver\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003eupdate\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//method to get updates from subject\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Override\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e String \u003cspan style=\"color:#a6e22e\"\u003egetUpdate\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eObserver obj\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//get the message from the observer\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003emessage\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//method to post message to the topic\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epostMessage\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eString msg\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//set the message\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003emessage\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e msg\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//notify all observers to post message\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        notifyObservers\u003cspan style=\"color:#f92672\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTopicSubscriber\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eimplements\u003c/span\u003e Observer \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//name of the observer\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e String name\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e Subject topic\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//constructor\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTopicSubscriber\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eString name\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e Subject topic\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e name\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etopic\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e topic\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//method to print out the update. used by Subject class.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Override\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eupdate\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        String msg \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e topic\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egetUpdate\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        System\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003ename \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026gt;\u0026gt; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e msg\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn the example, we have a Topic class that creates a topic that observers can subscribe to. The TopicSubscriber class creates an observer that can subscribe to a topic.\u003c/p\u003e\n\u003cp\u003eFinally, we have a main class that creates a topic and two observers: a and b. The observers are then registered to the topic. The topic then posts a message, which notifies all observers to print out the message.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHelloWorld\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e args\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Topic topic \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Topic\u003cspan style=\"color:#f92672\"\u003e();\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Observer a \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e TopicSubscriber\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e topic\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Observer b \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e TopicSubscriber\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e topic\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        topic\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eregister\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003ea\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        topic\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eregister\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eb\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        topic\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003epostMessage\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello World\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e);\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eoutput:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ea \u0026gt;\u0026gt; Hello World\r\nb \u0026gt;\u0026gt; Hello World\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn this example, the topic is the subject and the observers are the objects that are watching the subject. The observers are notified whenever the subject updates its state. It demonstarted how the observer pattern can create a 1-to-many relationship between objects. Object pattern is used in many applications, such as in the Java Swing library to build Graphic User Interface.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn this post, we learned about the 4 common design patterns: Singleton pattern, the Factory pattern, the Strategy pattern, and the Observer pattern. A wise use of these patterns will create more flexible and reusable code for your program (they are very useful for OOD class as well). I will be writing more posts about design patterns such as Adaptor and MCV in the future, so stay tuned!\u003c/p\u003e\n","description":"Explanation of Design Patterns for beginners","image":"/posts/OOD/java.png","permalink":"https://jooncode.com/code/ood/","title":"Design Patterns"},{"content":"\u003cp\u003eNothing crazy. Just some typing video with my first custom keyboard.\n\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n  \u003ciframe src=\"https://www.youtube.com/embed/wZf8Oi4YeHw\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allowfullscreen title=\"YouTube Video\"\u003e\u003c/iframe\u003e\n\u003c/div\u003e\n\u003c/p\u003e\n","description":"FrogTKL typing video","image":"/posts/keyboard/frogtkl.jpg","permalink":"https://jooncode.com/blogs/keyboard/frogtkl/","title":"My first custom keyboard"},{"content":"\u003cimg src=\"/me/military.jpg\" style=\"display: block; margin-left: auto; margin-right: auto; width: 50%; height: 50%;\"/\u003e\n\u003cimg src=\"/me/northeastern.jpg\" style=\"display: block; margin-left: auto; margin-right: auto; width: 50%; height: 50%;\"/\u003e\n\u003cimg src=\"/me/Dinner.jpg\" style=\"display: block; margin-left: auto; margin-right: auto; width: 50%; height: 50%;\"/\u003e\n\u003cimg src=\"/me/newyork.jpg\" style=\"display: block; margin-left: auto; margin-right: auto; width: 50%; height: 50%;\"/\u003e\n\u003cimg src=\"/me/pack.jpg\" style=\"display: block; margin-left: auto; margin-right: auto;width: 50%; height: 50%;\"/\u003e\n\u003cimg src=\"/me/pho.jpg\" style=\"display: block; margin-left: auto; margin-right: auto;width: 50%; height: 50%;\"/\u003e\n","description":"Great to be back to School","image":"/me/northeastern.jpg","permalink":"https://jooncode.com/blogs/gallery/2022/","title":"My 2022: Coming back from military!"},{"content":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eSoftware engineering is a rapidly changing field. Every day, new tools and technologies are being released that can help developers more efficiently create and manage applications. As a software engineer, it can be difficult to keep up with all the changes and ensure that you are staying up to date with the latest best practices. In this blog post, I will share my experience reaching out to my \u003ca href=\"https://www.youtube.com/channel/UCqI5lyTpC79pOy2D-VXAMdA\"\u003efavorite league data analysis youtuber\u003c/a\u003e\u0026rsquo;s company and apply my knowlege and skill out side of class.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/projects/ps.png\" alt=\"ps spectator\"\u003e\u003c/p\u003e\n\u003ch2 id=\"how-i-reached-out-to-them\"\u003eHow I reached out to them\u003c/h2\u003e\n\u003cp\u003eAfter completing the basic Computer Science classes, I looked for interesting side projects to join. I sent an e-mail to one of my favorite League YouTuber expressing my interest to join any proejcts and my desire to collaborate. To my surprise, the CEO responded and suggested that I start by helping with management of Discord community called NoTrollz for league of legend friendly matchs between clubs first. Then see if we could further develop something once we got to know each other better. I was thrilled to have the opportunity to work with a real-world company and acquire some valuable experience.\u003c/p\u003e\n\u003ch2 id=\"working-on-the-project\"\u003eWorking on the Project\u003c/h2\u003e\n\u003cp\u003eMy recent project was to create a discord bot that manages user\u0026rsquo;s roles and teams. The goal of the project was to learn Typescript and NestJs that would make the bot to be accessible to company\u0026rsquo;s current work environment. One of the biggest challenges I faced was learning how to learning new language and framework with limited amount of documents. These tools are relatively new and I had no prior experience working with them. Despite the challenges, I was ultimately able to create a simple bot that automated the chore for the server manager.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/projects/docker+postgresql.jpeg\" alt=\"docker+postgresql\"\u003e\u003c/p\u003e\n\u003ch2 id=\"continuing-education\"\u003eContinuing Education\u003c/h2\u003e\n\u003cp\u003eAfter the first part, I had a meeting with a senior developer from the company I\u0026rsquo;m working with. During the meeting, we discussed the current feature and the senior developer suggested to create a user data base and develop a more advanced automation bot.\u003c/p\u003e\n\u003cp\u003eThe automation of the feature could not be done solely with Discord\u0026rsquo;s features and a database was necessary to handle user\u0026rsquo;s roles and teams for extendability and sustainability. To match the company\u0026rsquo;s existing system, I learned and implemented Docker Compose and PostgreSQL. To ensure my plan of action would work, I conducted research and experimented with the new technologies before implementing them into the project.\u003c/p\u003e\n\u003ch2 id=\"dockerizing-the-bot\"\u003eDockerizing the bot\u003c/h2\u003e\n\u003cp\u003eTo begin with, I created a devcontainer with psql database in VS code, which allowed me to develop and test my bot in a containerized environment. Since this bot will run under AWS in future, I had to create the containerized environment to minimize unexpected bug. This was a crucial step in ensuring that my development environment was consistent across different machines.\u003c/p\u003e\n\u003cp\u003eNext, I built a data table using TypeORM Entity. When building the data table for my Discord bot, I took into consideration the potential future development plans and added data types that I would need from users.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e@Entity()\nexport class notrollz_entity extends BaseEntity {\n    @PrimaryGeneratedColumn(\u0026#34;uuid\u0026#34;)\n    uuid: string\n\n    @Index(\u0026#34;discord_id\u0026#34;, { unique: true })\n    @Column({ type: \u0026#34;varchar\u0026#34; })\n    discord_id: string\n\n    @Column({ type: \u0026#34;varchar\u0026#34; })\n    discord_tag: string\n\n    @Column({ type: \u0026#34;varchar\u0026#34; })\n    summoner_name: string\n\n    @Column({\n        type: \u0026#34;varchar\u0026#34;,\n        default: \u0026#34;\u0026#34;\n    })\n    team_name: string\n\n    @Column({\n        type: \u0026#34;boolean\u0026#34;,\n        default: false\n    })\n    team_catain?: boolean\n\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOne issue I encountered while building the data table was with the formatting of the Discord IDs. To resolve this, I used the uuid generator from Node.js to generate unique IDs for each user and gave the unique property to discord_id to prevent duplicate user registration on the database. By creating a well-structured data table with appropriate data types and using a unique ID generator, I was able to ensure that my Discord bot could accurately and efficiently store and retrieve user data. I then sent a query from my nestjs app with typeorm to qsql in the devcontainer to test the functionality of data table.\u003c/p\u003e\n\u003cimg src=\"/projects/psql_command.PNG\" style=\"display: block; margin-left: auto; margin-right: auto; width: 97%; height: 97%;\"/\u003e\n\u003cp\u003eAfter completing the initial development of the bot, I made the nestjs app into a Docker image and included it in a docker-compose file. This allowed me to easily deploy the bot to different environments and delegate the bot service to AWS instead of local computer. I also built a connection to psql in the new image with conscious volume mount, which was necessary for persisting data. When the connection was successful, I was very happy with my progress.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/projects/discord_usage.PNG\" alt=\"discord_usage\"\u003e\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eOverall, my experience working on this project was very rewarding. In a short amount of time, I was able to apply my knowledge of Object Oriented Design and acquire new experiences with docker containers, postgres, and javascript. Continuous education is an important part of staying up to date in the ever-changing world of software engineering and this project gave me the great lesson. By researching and experimenting with the latest tools and technologies, I am looking forward to create an advanced bot that improved the workflow of the community management of the company.\u003c/p\u003e\n","description":"Elaboration of my side project","image":"/projects/Bot_github.png","permalink":"https://jooncode.com/code/nestdiscordbot/","title":"Discord Bot Development story"},{"content":"\u003ch2 id=\"what-if-there-is-faker-bot-in-league\"\u003eWhat if there is Faker Bot in League?\u003c/h2\u003e\n\u003cp\u003eAs a computer science student, I find artificial intelligence (AI) bots fascinating. I want to extend the AI idea within the context of popular video games. With the development of AI technology, the way we play video games has drastically changed. AI-powered video games are now more interactive and immersive than ever before and have opened up a world of possibilities for gamers.\u003c/p\u003e\n\u003cp\u003eAI technology is also being used to create computer-controlled opponents that are smarter and learn from their mistakes, making the game much more challenging and fun. Moreover, AI-driven games can generate unique and customizable environments for players to explore and enjoy. These AI-driven environments can give rise to the development of new meta, creating new and exciting ways to play these games.\u003c/p\u003e\n\u003cp\u003eThe thought of an AI playing League of Legends at the highest level is an inspiring one. In order for it to play at a top level, it would need a massive amount of data from pro games and solo ranks with knowledge to be able to accurately react to in-game events in real-time. This would include its ability to understand every lane, item and champion interaction, as well as understanding the meta at a certain point in time.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/posts/League/humanVSai.jpg\" alt=\"Image from Sejong University\"\u003e\u003c/p\u003e\n\u003cp\u003eThere was an simlar attempt to create a \u0026ldquo;Pro Gamer AI\u0026rdquo; in Starcraft in 2017 at Sejong University, but it was not successful at the time because they were not able to build machine learning structure for the real time simulation games. For an AI to play at a top level, it would need to understand a massive amount of data from pro games and solo ranks, as well as knowledge to be able to accurately react to in-game events in real-time. This would include its ability to understand every lane, item and champion interaction, as well as understanding the meta at a certain point in time.\u003c/p\u003e\n\u003cp\u003eIt is fascinating to think about how this AI would be played. Would it still be EU meta, or would there be outstanding champions according to AI? Its ability to react to in-game events could make it an even more exciting player to watch. Additionally, an AI playing LOL at an AlphaGo level could potentially revolutionize the game with new meta led by AI and provide new insights for pro league games win percentage according to current situation.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/posts/League/LOL_Crowd.jpg\" alt=\"League Crowd\"\u003e\u003c/p\u003e\n\u003cp\u003eThe potential for AI technology in League of Legends is truly remarkable. As we imagine the possibilities, it\u0026rsquo;s clear that this technology has the power to transform the game in exciting new ways. The AI-led meta could open up entirely new strategies and tactics, and provide deep insights into the performance of professional teams and their win percentages in real-time. Furthermore, it has the potential to revolutionize the way intermediate-level players practice and improve their skills. By offering a challenging, dynamic and ever-changing AI opponent, players will no longer have to rely on boring or repetitive normal AI matches to sharpen their abilities. The future of League of Legends and AI technology is truly exciting. As I learn more about league API data and AI, I want to develop AI model for the pro league strategies!\u003c/p\u003e\n","description":"Thoughts about AI as a player in League of Legend","image":"/posts/League/faker.jpeg","permalink":"https://jooncode.com/blogs/game/leagueaibot/","title":"AI League of Legend"}]