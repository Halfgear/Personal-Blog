<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MongoDB on Joon Career</title><link>https://jooncode.com/tags/mongodb/</link><description>Recent content in MongoDB on Joon Career</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 20 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://jooncode.com/tags/mongodb/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a Match Crawler</title><link>https://jooncode.com/code/crawler/</link><pubDate>Sun, 20 Aug 2023 00:00:00 +0000</pubDate><guid>https://jooncode.com/code/crawler/</guid><description>Introduction Before I check my insights of Valorant with stats, the foremost task was to construct a robust data crawler. This pivotal first step would act as the foundation, paving the way for any meaningful analysis. When building a data crawler to fetch, process, and store a massive amount of data, challenges are inevitable. As I embarked on my journey to create a crawler for Valorant&amp;rsquo;s match data, I encountered a series of obstacles that pushed me to optimize my approach in terms of speed, storage, and robustness.</description></item><item><title>Agent difficulty Paradox</title><link>https://jooncode.com/code/agentparadox/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://jooncode.com/code/agentparadox/</guid><description>Introduction The realm of Valorant offers players numerous agents, each boasting unique abilities and strategies to win. But how do players, both new and experienced, navigate this vast selection?
With a combination of Python programming and a rich dataset extracted from MongoDB, I obtained the performance metrics of various agents across different skill tiers. The result challenges widely held beliefs and shed light on the actual efficacy of agents in various gameplay scenarios.</description></item></channel></rss>